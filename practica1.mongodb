// show dbs

use ('finanzas')

db.facturas.find()

// 1. Realizar una consulta que devuelva la siguiente información: Región y cantidad total de productos vendidos a clientes de esa Región.

db.facturas.aggregate([
    {$unwind:"$item"},
    {$group: {
        _id:"$cliente.region",
         total:{$sum:"$item.cantidad"}
         }
    }
])

// 2. Basado en la consulta del punto 1, mostrar sólo la región que tenga el menor ingreso.

db.facturas.aggregate([
    {$unwind:"$item"},
    {$group: {
        _id:"$cliente.region", 
        total: {$sum:"$item.cantidad"}
    }},
    {$sort: {total:1}},
    {$limit:1}
])

// 3. Basado en la consulta del punto 1, mostrar sólo las regiones que tengan una cantidad de productos vendidos superior a 10000.

db.facturas.aggregate([
    {$unwind:"$item"},
    {$group: {
        _id:"$cliente.region", 
        total: {$sum:"$item.cantidad"}
    }},
    {$match: {total:{$gt: 10000}}}
])

// 4. Se requiere obtener un reporte que contenga la siguiente información, nro. cuit, apellido y nombre y región y cantidad de facturas, ordenado por apellido.

db.facturas.aggregate([
    // {$unwind:"$item"},
    {$group:{
        _id:
        {cuit:"$cliente.cuit",
        ap: "$cliente.apellido",
        nom: "$cliente.nombre",
        reg: "$cliente.region"},
        fac: {$sum:1}
        }},
    {$sort:{'_id.ap':1}}
]);

// 5. Basados en la consulta del punto 4 informar sólo los clientes con número de CUIT mayor a 27000000000.
db.facturas.aggregate([
    {$group:{
        _id:
        {cuit:"$cliente.cuit",
        ap: "$cliente.apellido",
        nom: "$cliente.nombre",
        reg: "$cliente.region"},
        fac: {$sum:1}
        }},
    {$sort:{'_id.ap':1}},
    {$match:{'_id.cuit':{$gt:2700000000}}}
]);

// 6. Basados en la consulta del punto 5 informar solamente la cantidad de clientes que cumplen con esta condición.

// aca falta el FILTRO
db.facturas.aggregate([
    
    {$group:{
        _id:0,
        tot: {$sum:1}
        }},
    
    {$project: {
        _id:0,
        
        total: "$tot"
        }}
]);

// 7 Se requiere realizar una consulta que devuelva la siguiente información: producto y cantidad de facturas en las que lo compraron, ordenado por cantidad de facturas descendente.

db.facturas.aggregate([
    {$unwind:"$item"},
    {$group:{_id:{  
        producto:"$item.producto"
        },
        count:{
            $sum:1
        }
    }},
    {$sort:{count:-1}}
])

// 8. Obtener la cantidad total comprada así como también los ingresos totales para cada producto.

db.facturas.aggregate([
    {$unwind:"$item"},
    {$group:{_id:{  
        producto:"$item.producto"
        },
        cantidad:{
            $sum:"$item.cantidad"
        },
        precio:{
            $sum:"$item.precio"
        }
    }}
])

// 9. Idem el punto anterior, ordenar por ingresos en forma ascendente, saltear el 1ro y mostrar 2do y 3ro.

db.facturas.aggregate([
    {$unwind:"$item"},
    {$group:{_id:{  
        producto:"$item.producto"
        },
        cantidad:{
            $sum:"$item.cantidad"
        },
        precio:{
            $sum:"$item.precio"
        }
    }},
    {$sort:{precio:1}},
    {$skip:1},
    {$limit:2}
])

// 10. obtener todos productos junto con un array de las personas que lo compraron. En este array deberá haber solo strings con el nombre completo de la persona. Los documentos entregados como resultado deberán tener la siguiente forma:
// {producto: “<nombre>”, personas:[“…”, …]}

db.facturas.aggregate([
    {$unwind:"$item"},
    
    {$group:{_id:0

    }},
    {
    $project: {
        producto:"$item.producto"
        nombre:"$cliente.nombre"
    }}
])